namespace WrestlerApp.Wrestler;

/// <summary>
/// Creates a List of Wrestlers
/// </summary>
public class WrestlerFactory
{
    private readonly int _noOfWrestlers, _schoolId;
    private readonly int[,] _weightClasses;
    private readonly Random _rand;
    
    /// <summary>
    /// Constructor Method for the Wrestler Factory.
    /// </summary>
    /// <param name="noOfWrestlers">The Number of Wrestlers to be Generated by this Object.</param>
    /// <param name="schoolId">The ID of the School Requesting Wrestlers.</param>
    /// <param name="rand">An Instance of the Random Class.</param>
    public WrestlerFactory(int noOfWrestlers, int schoolId, Random rand)
    {
        _noOfWrestlers = noOfWrestlers;
        _schoolId = schoolId;
        _weightClasses = WeightClasses();
        _rand = rand;
    }
    
    /// <summary>
    /// Gets a List of Wrestlers.
    /// </summary>
    /// <returns>A List of Wrestlers.</returns>
    public List<Wrestler> GetWrestlerList()
    {
        List<Wrestler> wrestlers = new List<Wrestler>();
        for (var i = 1; i < _noOfWrestlers; i++)
        {
            int weightIndex = _rand.Next(0, 12);
            wrestlers.Add(new Wrestler(GenerateId(i), GenerateWeight(weightIndex), weightIndex, 
                GenerateAbility()));
        }

        return wrestlers;
    }
    
    /// <summary>
    /// Gets a Weight for a Wrestler.
    /// </summary>
    /// <param name="weightClass">The Weight Class Requested.</param>
    /// <returns>A Random Weight of the Given Weight Class.</returns>
    private int GenerateWeight(int weightClass)
    {
        return _rand.Next(_weightClasses[weightClass, 0], _weightClasses[weightClass, 1]);
    }
    
    /// <summary>
    /// Generates an ID for a Wrestler.
    /// </summary>
    /// <param name="index">The Index to be added to the School ID</param>
    /// <returns>A Wrestler ID.</returns>
    private int GenerateId(int index)
    {
        return _schoolId + index;
    }
    
    /// <summary>
    /// Generates a Random Ability Level.
    /// </summary>
    /// <returns>A Random Ability Level.</returns>
    private int GenerateAbility()
    {
        return _rand.Next(85, 115);
    }
    
    /// <summary>
    /// Gets all of the Possible Weight Classes.
    /// </summary>
    /// <returns>All Weight Classes.</returns>
    public static int[,] WeightClasses()
    {
        return new [,]
        {
            { 94, 106 },
            { 106, 113 },
            { 113, 120 },
            { 120, 126 },
            { 126, 132 },
            { 132, 138 },
            { 138, 145 },
            { 145, 152 },
            { 152, 167 },
            { 167, 189 },
            { 189, 220 },
            { 220, 285 }
        };
    }
}